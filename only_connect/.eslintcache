[{"/Users/alexkats/Documents/Only_Connect/only_connect/src/index.js":"1","/Users/alexkats/Documents/Only_Connect/only_connect/src/reportWebVitals.js":"2","/Users/alexkats/Documents/Only_Connect/only_connect/src/App.js":"3","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSWall.js":"4","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/MissingVowels.js":"5","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WordWall.js":"6","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Rectangle.js":"7","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WallIcon.js":"8","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Game.js":"9","/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/helpersWordWall.js":"10","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSRow.js":"11","/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/gameData.js":"12","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/NextButton.js":"13"},{"size":503,"mtime":1608086169321,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1608086169321,"results":"16","hashOfConfig":"15"},{"size":232,"mtime":1612230244742,"results":"17","hashOfConfig":"15"},{"size":2738,"mtime":1612331833649,"results":"18","hashOfConfig":"15"},{"size":452,"mtime":1612230244744,"results":"19","hashOfConfig":"15"},{"size":7057,"mtime":1612415652574,"results":"20","hashOfConfig":"15"},{"size":1630,"mtime":1612412824828,"results":"21","hashOfConfig":"15"},{"size":482,"mtime":1612331901339,"results":"22","hashOfConfig":"15"},{"size":1548,"mtime":1612332109007,"results":"23","hashOfConfig":"15"},{"size":1945,"mtime":1609739041880,"results":"24","hashOfConfig":"15"},{"size":1906,"mtime":1612832033205,"results":"25","hashOfConfig":"15"},{"size":2661,"mtime":1612324514199,"results":"26","hashOfConfig":"15"},{"size":612,"mtime":1612414218722,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1fajw7o",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexkats/Documents/Only_Connect/only_connect/src/index.js",[],["61","62"],"/Users/alexkats/Documents/Only_Connect/only_connect/src/reportWebVitals.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/App.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSWall.js",["63"],"import React from \"react\";\nimport WallIcon from \"./WallIcon\";\nimport frog from \"./../images/frog.png\";\nimport kangaroo from \"./../images/kangaroo.png\";\nimport elephant from \"./../images/elephant.png\";\nimport bird from \"./../images/bird.png\";\nimport koala from \"./../images/koala.png\";\nimport sloth from \"./../images/sloth.png\";\nimport { useState } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport \"./PSWall.css\";\nimport Data from \"../utilities/gameData\";\n\nfunction PSWall(props) {\n    const [hidden, setHidden] = useState({\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n    });\n\n    const handleClick = (id) => {\n        const temp_hidden = { ...hidden };\n        temp_hidden[id] = \"invisible\";\n        setHidden(temp_hidden);\n        props.onClick(id);\n    };\n\n    return (\n        <div className=\"PSWall_container\">\n            <h1 className=\"title\">Only Connect</h1>\n            <div className=\"grid grid-flow-col grid-rows-3 sm:grid-rows-2 lg:grid-rows-2\">\n                <Card>\n                    <WallIcon\n                        icon={frog}\n                        hidden={hidden[1]}\n                        id={0}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n                <Card>\n                    <WallIcon\n                        icon={kangaroo}\n                        hidden={hidden[2]}\n                        id={1}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n                <Card>\n                    <WallIcon\n                        icon={elephant}\n                        hidden={hidden[3]}\n                        id={2}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n                <Card>\n                    {\" \"}\n                    <WallIcon\n                        icon={bird}\n                        hidden={hidden[4]}\n                        id={3}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n\n                <Card>\n                    <WallIcon\n                        icon={koala}\n                        hidden={hidden[5]}\n                        id={4}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n\n                <Card>\n                    <WallIcon\n                        icon={sloth}\n                        hidden={hidden[6]}\n                        id={5}\n                        onClick={handleClick}\n                    ></WallIcon>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nexport default PSWall;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/MissingVowels.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WordWall.js",["64","65","66"],"import React, { createRef, Component } from \"react\";\nimport Rectangle from \"./Rectangle\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { clearClickedList, checkForMatch, animate, randomize } from \"../utilities/helpersWordWall\";\nimport Button from \"@material-ui/core/Button\";\nimport Data from \"../utilities/gameData\";\nimport \"./WordWall.css\";\n\nconst colorDictionary = {\n    0: \"bg-red-500\",\n    1: \"bg-blue-500\",\n    2: \"bg-green-500\",\n    3: \"bg-yellow-500\",\n};\n// const wordDictionary = [\n//     [\"Hazelnut\", \"Butter Pecan\", \"Coconut\", \"Caramel\"],\n//     [\"Cube\", \"Vanilla\", \"T\", \"Prince\"],\n//     [\"Australia\", \"Guam\", \"Papua New Guinea\", \"Cook Islands\"],\n//     [\"Champagne\", \"San Pellegrino\", \"Fiji\", \"Mocha\"],\n// ];\n\nconst wordDictionary = Data.wall.wall2;\n\nclass WordWall extends Component {\n    constructor() {\n        super();\n        this.idToIndex = new Map();\n        this.refsArr = [];\n        this.state = {\n            clicked: [],\n            color_count: 0,\n            solved: [],\n        };\n        this.handleClickBlock = this.handleClickBlock.bind(this);\n        this.solveBoard = this.solveBoard.bind(this);\n    }\n\n    componentDidMount() {\n        let blocks = [];\n        for (let [index, group] of wordDictionary.entries()) {\n            let words = group.map((word) => {\n                this.refsArr.push(createRef());\n                return {\n                    word: word,\n                    color: \"bg-oc-blue\",\n                    id: uuidv4(),\n                    group: index,\n                    clicked: false,\n                    matched: false,\n                };\n            });\n            blocks.push(...words);\n        }\n        blocks = randomize(blocks);\n        for (let [index, block] of blocks.entries()) {\n            this.idToIndex.set(block.id, index);\n        }\n        this.setState({ solved: blocks });\n    }\n\n    handleClickBlock(obj) {\n        if (this.state.clicked.length < 4) {\n            if (obj.clicked) {\n                this.unClickBlock(obj);\n            } else {\n                this.clickBlock(obj);\n            }\n        }\n    }\n\n    clickBlock(obj) {\n        const clickedList = [...this.state.clicked],\n            solvedList = [...this.state.solved];\n        let delay = 0,\n            count = this.state.color_count;\n        clickedList.push(obj);\n        const foundIndex = this.idToIndex.get(obj.id);\n        solvedList[foundIndex].clicked = true;\n        solvedList[foundIndex].color = colorDictionary[count];\n        this.setState({ solved: solvedList, clicked: clickedList }, () => {\n            if (clickedList.length === 4) {\n                this.fourthBlockClicked();\n            }\n        });\n    }\n\n    fourthBlockClicked() {\n        let delay = 0,\n            count = this.state.color_count;\n        const clickedList = [...this.state.clicked];\n        const solvedList = [...this.state.solved];\n        const areOfSameGroup = checkForMatch(clickedList);\n        if (areOfSameGroup) {\n            if (count == 2) {\n                this.solveBoard();\n                return;\n            } else {\n                this.matchRow(clickedList, solvedList, count);\n                count++;\n            }\n        } else {\n            clearClickedList(clickedList, solvedList, this.idToIndex);\n            delay = 250;\n        }\n        clickedList.length = 0;\n        setTimeout(() => {\n            this.setState({\n                solved: solvedList,\n                clicked: clickedList,\n                color_count: count,\n            });\n        }, delay);\n    }\n\n    unClickBlock(obj) {\n        let clickedList = [...this.state.clicked],\n            solvedList = [...this.state.solved];\n        clickedList = clickedList.filter((word) => {\n            return word.id !== obj.id;\n        });\n        let unclickIndex = this.idToIndex.get(obj.id);\n        solvedList[unclickIndex].color = \"bg-oc-blue\";\n        solvedList[unclickIndex].clicked = false;\n        this.setState({ solved: solvedList, clicked: clickedList });\n    }\n\n    matchRow(clickedList, solvedList, count) {\n        const eltBoundsBefore = this.refsArr.map((el) => {\n            return el.current.getBoundingClientRect();\n        });\n        const arr = [...this.refsArr];\n        for (let block of clickedList) {\n            const foundIndex = solvedList.findIndex((word) => word.id == block.id);\n            solvedList[foundIndex].matched = true;\n            const removedVal = solvedList.splice(foundIndex, 1);\n            const removedRef = this.refsArr.splice(foundIndex, 1);\n            solvedList.splice(count * 4, 0, ...removedVal);\n            this.refsArr.splice(count * 4, 0, ...removedRef);\n        }\n        this.setState({ solved: solvedList }, () => {\n            animate(arr, eltBoundsBefore);\n            for (let [index, block] of solvedList.entries()) {\n                this.idToIndex.set(block.id, index);\n            }\n        });\n    }\n\n    solveBoard() {\n        const solvedList = [...this.state.solved];\n        const color = this.state.color_count;\n        const nodeToRef = new Map();\n        const eltBoundsBefore = this.refsArr.map((el) => {\n            return el.current.getBoundingClientRect();\n        });\n        let arr = [...this.refsArr];\n        const matchedIndex = solvedList.findIndex((el) => !el.matched);\n\n        solvedList.forEach((block, index) => {\n            nodeToRef.set(block.id, this.refsArr[index]);\n        });\n        const length = solvedList.length;\n        const toBeMatched = solvedList.splice(matchedIndex, length - matchedIndex);\n        this.refsArr.splice(matchedIndex, length - matchedIndex);\n\n        toBeMatched.sort((a, b) => a.group - b.group);\n        toBeMatched.forEach((block, index) => {\n            block.matched = true;\n            block.clicked = true;\n            block.color = colorDictionary[color + Math.floor(index / 4)];\n            solvedList.push(block);\n            this.refsArr.push(nodeToRef.get(block.id));\n        });\n        this.setState({ solved: solvedList }, () => {\n            animate(arr, eltBoundsBefore);\n        });\n    }\n\n    buildBoard() {\n        return this.state.solved.map((block, index) => {\n            return (\n                <Rectangle\n                    ref={this.refsArr[index]}\n                    key={block.id}\n                    type=\"wall\"\n                    {...block}\n                    clickBlock={this.handleClickBlock}\n                >\n                    {block.word}\n                </Rectangle>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1 style={{ textAlign: \"center\" }}>Word Wall</h1>\n                <div className=\"grid justify-center items-center\">{this.buildBoard()}</div>\n                <Button\n                    style={{ width: \"50%\" }}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.solveBoard}\n                >\n                    Solve\n                </Button>\n            </div>\n        );\n    }\n}\nexport default WordWall;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Rectangle.js",["67","68","69"],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WallIcon.js",["70"],"import React from \"react\";\nimport { useState } from \"react\";\n\nfunction WallIcon(props) {\n    const handleClick = () => {\n        props.onClick(props.id);\n    };\n    return (\n        <div className=\"p-10 cursor-pointer\" onClick={handleClick}>\n            <img\n                className={`h-24 w-24 sm:h-30 sm:w-30 lg:h-auto lg:w-auto ${props.hidden}`}\n                src={props.icon}\n                alt={props.icon}\n            />\n        </div>\n    );\n}\n\nexport default WallIcon;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Game.js",["71","72","73","74","75"],"import React, { useState } from \"react\";\nimport PSWall from \"./PSWall\";\nimport WordWall from \"./WordWall\";\nimport PSRow from \"./PSRow\";\nimport MissingVowels from \"./MissingVowels\";\nimport Data from \"../utilities/gameData\";\n\nconst sequences = Data.sequences;\nconst patterns = Data.patterns;\nconst missingVowels = Data.missingVowels;\n\nfunction Game({ ...props }) {\n    const [gameState, setGameState] = useState({\n        gameStarted: true,\n        round: 0,\n        wallIndex: 0,\n        scores: 0,\n        clickedRow: false,\n    });\n\n    const connectionWall = [\n        [\"A\", \"B\", \"C\", \"D\", \"Letter\"],\n        [\"E\", \"F\", \"G\", \"H\", \"Letter\"],\n        [\"I\", \"J\", \"K\", \"L\", \"Letter\"],\n        [\"M\", \"N\", \"O\", \"P\", \"Letter\"],\n    ];\n\n    const incrementRound = () => {\n        setGameState({ ...gameState, round: gameState.round + 1 });\n        console.log(gameState.round);\n    };\n\n    const psWallHandle = (id) => {\n        setGameState({ ...gameState, clickedRow: true, wallIndex: id });\n    };\n\n    const psRowExit = () => {\n        setGameState({ ...gameState, wallIndex: gameState.wallIndex + 1, clickedRow: false });\n    };\n\n    var div = null;\n\n    if (gameState.round < 2) {\n        return (\n            <div>\n                {gameState.clickedRow === false ? (\n                    <PSWall onClick={psWallHandle}></PSWall>\n                ) : (\n                    <PSRow exitClick={psRowExit} row={patterns[gameState.wallIndex]}></PSRow>\n                )}\n            </div>\n        );\n    }\n    return <WordWall />;\n}\nexport default Game;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/helpersWordWall.js",["76","77","78"],"export function randomize(arr) {\n    let random = [];\n    let val = 0;\n    while (arr.length) {\n        let index = Math.floor(Math.random() * arr.length);\n        val = arr.splice(index, 1);\n        random.push(...val);\n    }\n    return random;\n}\n\nexport function animate(arr, eltBoundsBefore, color) {\n    const eltBoundsAfter = arr.map((el) => {\n        return el.current.getBoundingClientRect();\n    });\n\n    arr.forEach((item, index) => {\n        const deltaX = eltBoundsBefore[index].left - eltBoundsAfter[index].left;\n        const deltaY = eltBoundsBefore[index].top - eltBoundsAfter[index].top;\n        const deltaW = eltBoundsBefore[index].width / eltBoundsAfter[index].width;\n        const deltaH = eltBoundsBefore[index].height / eltBoundsAfter[index].height;\n\n        item.current.animate(\n            [\n                {\n                    transformOrigin: \"top left\",\n                    transform: `\n                  translate(${deltaX}px, ${deltaY}px)\n                  scale(${deltaW}, ${deltaH})\n                `,\n                },\n                {\n                    transformOrigin: \"top left\",\n                    transform: `\n                translate(${0}px, ${0}px)\n                scale(${deltaW}, ${deltaH})\n              `,\n                },\n            ],\n            {\n                duration: 1000,\n                easing: \"ease-in-out\",\n                fill: \"both\",\n            },\n        );\n    });\n}\n\nexport function checkForMatch(clickedList) {\n    return (\n        clickedList[0].group == clickedList[1].group &&\n        clickedList[0].group == clickedList[2].group &&\n        clickedList[0].group == clickedList[3].group\n    );\n}\n\nexport function clearClickedList(clickedList, solvedList, idToIndex) {\n    for (let block of clickedList) {\n        let foundIndex = idToIndex.get(block.id);\n        solvedList[foundIndex].clicked = false;\n        solvedList[foundIndex].color = \" bg-oc-blue\";\n    }\n}\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSRow.js",["79","80","81","82"],"/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/gameData.js",["83"],"export default {\n    patterns: [\n        {\n            clues: [\"Michael Jordan\", \"Magic Johnson\", \"Derek Fisher\", \"Scottie Pippen\"],\n            answer: \" NBA Players with 5+ Championships\",\n        },\n        {\n            clues: [\"Dash\", \"Good American\", \"POOSH\", \"SKIMS\"],\n            answer: \"Kardashian Brands\",\n        },\n        {\n            clues: [\n                \"Eva, Can I Stab Bats In A Cave\",\n                \"Dammit, I'm Mad\",\n                \"Do Geese See God\",\n                \"Racecar\",\n            ],\n            answer: \"Palindromes\",\n        },\n        {\n            clues: [\"Mag\", \"Hip\", \"Yup\", \"Pot\"],\n            answer: \"______pie\",\n        },\n\n        {\n            clues: [\"Apples\", \"Dates\", \"Pomegranate\", \"Challah\"],\n            answer: \"Symbolic Rosh Hashanah Foods\",\n        },\n        {\n            clues: [\"Wombat\", \"Opoosum\", \"Koala\", \"Kangaroo\"],\n            answer: \"Marsupials\",\n        },\n    ],\n    sequences: {\n        1: {\n            clues: [\"Blue\", \"North\", \"Luna\", \"X Æ A-Xii\"],\n            answers: \"Celebrity Babies in order of birth\",\n        },\n        2: {\n            clues: \"Order of sharks in Baby Shark\",\n            answers: [\"Baby\", \"Mommy\", \"Daddy\", \"Grandma\"],\n        },\n        3: {\n            clues: [\"Rachel\", \"Becca\", \"Hannah\", \"Clare\"],\n            answers: \"The Bachelorettes from ‘17-’20\",\n        },\n        4: {\n            clues: [\"M = 1\", \"V = 2\", \"E = 3\", \"M = 4\"],\n            answers: \"Planets\",\n        },\n        5: {\n            clues: [\"Zach\", \"Alex\", \"PJ\", \"Ang\"],\n            answers: \"Big Rascals Birthday’s\",\n        },\n        6: {\n            clues: [\"United States\", \"China\", \"Canada\", \"Russia\"],\n            answers: \"Size of Countries (Increasing)\",\n        },\n    },\n    wall: {\n        wall1: [\n            [\"Fiji\", \"Mocha\", \"San Pellegrino\", \"Champagne\"],\n            [\"T\", \"Cube\", \"Vanilla\", \"Prince\"],\n            [\"Hazelnut\", \"Coconut\", \"Butter Pecan\", \"Caramel\"],\n            [\"Papua New Guinea\", \"Guam\", \"Australia\", \"Cook Islands\"],\n        ],\n        wall2: [\n            [\"Eagles\", \"Beatles\", \"Monkees\", \"Gorillaz\"],\n            [\"Pelicans\", \"Seahawks\", \"Flacons\", \"Cardinals\"],\n            [\"Sapphire\", \"Ruby\", \"Emerald\", \"Amethyst\"],\n            [\"Crystal\", \"Gold\", \"Silver\", \"Diamond\"],\n        ],\n    },\n    \"missing vowels\": {\n        Chores: [\"W SH NTH GD HS\", \"F LD NGL ND RY\", \"WPN GT HW NDW s\", \"HDNG STFF NTH CL ST\"],\n        \"Clothing Brands\": [\"CL VNKL N\", \"ZR\", \"N DRRM R\", \"K NNT HC L\"],\n        \"Mixed Drinks\": [\"W H TRS SN\", \"MSC WML\", \"D RKN DSTR M\", \"MRT TSR\"],\n        \"Cities in Israel\": [\"JR S LM\", \"T LV V\", \"HF\", \"JF F\"],\n    },\n};\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/NextButton.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":12,"column":8,"nodeType":"90","messageId":"91","endLine":12,"endColumn":12},{"ruleId":"88","severity":1,"message":"92","line":74,"column":13,"nodeType":"90","messageId":"91","endLine":74,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":94,"column":23,"nodeType":"95","messageId":"96","endLine":94,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":133,"column":71,"nodeType":"95","messageId":"96","endLine":133,"endColumn":73},{"ruleId":"88","severity":1,"message":"97","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":28},{"ruleId":"88","severity":1,"message":"98","line":1,"column":30,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"99","line":1,"column":38,"nodeType":"90","messageId":"91","endLine":1,"endColumn":47},{"ruleId":"88","severity":1,"message":"100","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"88","severity":1,"message":"101","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":21},{"ruleId":"88","severity":1,"message":"102","line":8,"column":7,"nodeType":"90","messageId":"91","endLine":8,"endColumn":16},{"ruleId":"88","severity":1,"message":"103","line":10,"column":7,"nodeType":"90","messageId":"91","endLine":10,"endColumn":20},{"ruleId":"88","severity":1,"message":"104","line":21,"column":11,"nodeType":"90","messageId":"91","endLine":21,"endColumn":25},{"ruleId":"88","severity":1,"message":"105","line":28,"column":11,"nodeType":"90","messageId":"91","endLine":28,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":51,"column":30,"nodeType":"95","messageId":"96","endLine":51,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":52,"column":30,"nodeType":"95","messageId":"96","endLine":52,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":53,"column":30,"nodeType":"95","messageId":"96","endLine":53,"endColumn":32},{"ruleId":"88","severity":1,"message":"99","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"106","line":9,"column":11,"nodeType":"90","messageId":"91","endLine":9,"endColumn":28},{"ruleId":"88","severity":1,"message":"107","line":11,"column":11,"nodeType":"90","messageId":"91","endLine":11,"endColumn":17},{"ruleId":"108","severity":1,"message":"109","line":30,"column":40,"nodeType":"110","messageId":"111","endLine":30,"endColumn":42},{"ruleId":"112","severity":1,"message":"113","line":1,"column":1,"nodeType":"114","endLine":80,"endColumn":3},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Data' is defined but never used.","Identifier","unusedVar","'delay' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useCallback' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'MissingVowels' is defined but never used.","'sequences' is assigned a value but never used.","'missingVowels' is assigned a value but never used.","'connectionWall' is assigned a value but never used.","'incrementRound' is assigned a value but never used.","'hidden_dictionary' is assigned a value but never used.","'answer' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]