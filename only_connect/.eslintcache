[{"/Users/alexkats/Documents/Only_Connect/only_connect/src/index.js":"1","/Users/alexkats/Documents/Only_Connect/only_connect/src/reportWebVitals.js":"2","/Users/alexkats/Documents/Only_Connect/only_connect/src/App.js":"3","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSWall.js":"4","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/MissingVowels.js":"5","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WordWall.js":"6","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Rectangle.js":"7","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WallIcon.js":"8","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Game.js":"9","/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/helpersWordWall.js":"10","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSRow.js":"11"},{"size":503,"mtime":1608086169321,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1608086169321,"results":"14","hashOfConfig":"13"},{"size":232,"mtime":1612230244742,"results":"15","hashOfConfig":"13"},{"size":2692,"mtime":1612240298687,"results":"16","hashOfConfig":"13"},{"size":452,"mtime":1612230244744,"results":"17","hashOfConfig":"13"},{"size":6956,"mtime":1612231462470,"results":"18","hashOfConfig":"13"},{"size":2017,"mtime":1612230265335,"results":"19","hashOfConfig":"13"},{"size":391,"mtime":1612230244746,"results":"20","hashOfConfig":"13"},{"size":1359,"mtime":1612230598669,"results":"21","hashOfConfig":"13"},{"size":1945,"mtime":1609739041880,"results":"22","hashOfConfig":"13"},{"size":1516,"mtime":1612230244744,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1fajw7o",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"/Users/alexkats/Documents/Only_Connect/only_connect/src/index.js",[],["52","53"],"/Users/alexkats/Documents/Only_Connect/only_connect/src/reportWebVitals.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/App.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSWall.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/MissingVowels.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WordWall.js",["54","55","56"],"import React, { createRef, Component } from \"react\";\nimport Rectangle from \"./Rectangle\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { clearClickedList, checkForMatch, animate, randomize } from \"../utilities/helpersWordWall\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./WordWall.css\";\n\nconst colorDictionary = {\n    0: \"bg-red-500\",\n    1: \"bg-blue-500\",\n    2: \"bg-green-500\",\n    3: \"bg-yellow-500\",\n};\nconst wordDictionary = [\n    [\"Hazelnut\", \"Butter Pecan\", \"Coconut\", \"Caramel\"],\n    [\"Cube\", \"Vanilla\", \"T\", \"Prince\"],\n    [\"Australia\", \"Guam\", \"Papua New Guinea\", \"Cook Islands\"],\n    [\"Champagne\", \"San Pellegrino\", \"Fiji\", \"Mocha\"],\n];\n\nclass WordWall extends Component {\n    constructor() {\n        super();\n        this.idToIndex = new Map();\n        this.refsArr = [];\n        this.state = {\n            clicked: [],\n            color_count: 0,\n            solved: [],\n        };\n        this.handleClickBlock = this.handleClickBlock.bind(this);\n        this.solveBoard = this.solveBoard.bind(this);\n    }\n\n    componentDidMount() {\n        let blocks = [];\n        for (let [index, group] of wordDictionary.entries()) {\n            let words = group.map((word) => {\n                this.refsArr.push(createRef());\n                return {\n                    word: word,\n                    color: \"bg-oc-blue\",\n                    id: uuidv4(),\n                    group: index,\n                    clicked: false,\n                    matched: false,\n                };\n            });\n            blocks.push(...words);\n        }\n        blocks = randomize(blocks);\n        for (let [index, block] of blocks.entries()) {\n            this.idToIndex.set(block.id, index);\n        }\n        this.setState({ solved: blocks });\n    }\n\n    handleClickBlock(obj) {\n        if (this.state.clicked.length < 4) {\n            if (obj.clicked) {\n                this.unClickBlock(obj);\n            } else {\n                this.clickBlock(obj);\n            }\n        }\n    }\n\n    clickBlock(obj) {\n        const clickedList = [...this.state.clicked],\n            solvedList = [...this.state.solved];\n        let delay = 0,\n            count = this.state.color_count;\n        clickedList.push(obj);\n        const foundIndex = this.idToIndex.get(obj.id);\n        solvedList[foundIndex].clicked = true;\n        solvedList[foundIndex].color = colorDictionary[count];\n        this.setState({ solved: solvedList, clicked: clickedList }, () => {\n            if (clickedList.length === 4) {\n                this.fourthBlockClicked();\n            }\n        });\n    }\n\n    fourthBlockClicked() {\n        let delay = 0,\n            count = this.state.color_count;\n        const clickedList = [...this.state.clicked];\n        const solvedList = [...this.state.solved];\n        const areOfSameGroup = checkForMatch(clickedList);\n        if (areOfSameGroup) {\n            if (count == 2) {\n                this.solveBoard();\n                return;\n            } else {\n                this.matchRow(clickedList, solvedList, count);\n                count++;\n            }\n        } else {\n            clearClickedList(clickedList, solvedList, this.idToIndex);\n            delay = 250;\n        }\n        clickedList.length = 0;\n        setTimeout(() => {\n            this.setState({\n                solved: solvedList,\n                clicked: clickedList,\n                color_count: count,\n            });\n        }, delay);\n    }\n\n    unClickBlock(obj) {\n        let clickedList = [...this.state.clicked],\n            solvedList = [...this.state.solved];\n        clickedList = clickedList.filter((word) => {\n            return word.id !== obj.id;\n        });\n        let unclickIndex = this.idToIndex.get(obj.id);\n        solvedList[unclickIndex].color = \"bg-oc-blue\";\n        solvedList[unclickIndex].clicked = false;\n        this.setState({ solved: solvedList, clicked: clickedList });\n    }\n\n    matchRow(clickedList, solvedList, count) {\n        const eltBoundsBefore = this.refsArr.map((el) => {\n            return el.current.getBoundingClientRect();\n        });\n        const arr = [...this.refsArr];\n        for (let block of clickedList) {\n            const foundIndex = solvedList.findIndex((word) => word.id == block.id);\n            solvedList[foundIndex].matched = true;\n            const removedVal = solvedList.splice(foundIndex, 1);\n            const removedRef = this.refsArr.splice(foundIndex, 1);\n            solvedList.splice(count * 4, 0, ...removedVal);\n            this.refsArr.splice(count * 4, 0, ...removedRef);\n        }\n        this.setState({ solved: solvedList }, () => {\n            animate(arr, eltBoundsBefore);\n            for (let [index, block] of solvedList.entries()) {\n                this.idToIndex.set(block.id, index);\n            }\n        });\n    }\n\n    solveBoard() {\n        const solvedList = [...this.state.solved];\n        const color = this.state.color_count;\n        const nodeToRef = new Map();\n        const eltBoundsBefore = this.refsArr.map((el) => {\n            return el.current.getBoundingClientRect();\n        });\n        let arr = [...this.refsArr];\n        const matchedIndex = solvedList.findIndex((el) => !el.matched);\n\n        solvedList.forEach((block, index) => {\n            nodeToRef.set(block.id, this.refsArr[index]);\n        });\n        const length = solvedList.length;\n        const toBeMatched = solvedList.splice(matchedIndex, length - matchedIndex);\n        this.refsArr.splice(matchedIndex, length - matchedIndex);\n\n        toBeMatched.sort((a, b) => a.group - b.group);\n        toBeMatched.forEach((block, index) => {\n            block.matched = true;\n            block.clicked = true;\n            block.color = colorDictionary[color + Math.floor(index / 4)];\n            solvedList.push(block);\n            this.refsArr.push(nodeToRef.get(block.id));\n        });\n        this.setState({ solved: solvedList }, () => {\n            animate(arr, eltBoundsBefore);\n        });\n    }\n\n    buildBoard() {\n        return this.state.solved.map((block, index) => {\n            return (\n                <Rectangle\n                    ref={this.refsArr[index]}\n                    key={block.id}\n                    type=\"wall\"\n                    {...block}\n                    clickBlock={this.handleClickBlock}\n                >\n                    {block.word}\n                </Rectangle>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1 style={{ textAlign: \"center\" }}>Word Wall</h1>\n                <div className=\"grid justify-center items-center\">{this.buildBoard()}</div>\n                <Button\n                    style={{ width: \"50%\" }}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.solveBoard}\n                >\n                    Solve\n                </Button>\n            </div>\n        );\n    }\n}\nexport default WordWall;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Rectangle.js",["57","58","59"],"import React, { useCallback, useRef, useEffect, forwardRef } from \"react\";\n\nconst Rectangle = forwardRef(({ ...props }, ref) => {\n    // const myRef = useCallback(node => {\n    //     if(node){\n    //         first = node.getBoundingClientRect()\n    //     }\n    //     console.log(first)\n    // },[props.matched])\n\n    // let myRef = useRef();\n    //console.log(myRef.current)\n    function handleClick() {\n        let obj = {\n            word: props.word,\n            id: props.id,\n            group: props.group,\n            clicked: props.clicked,\n            ref,\n        };\n        props.clickBlock(obj);\n    }\n    var text_size = \"\";\n    var width = \"\";\n    var height = \"\";\n    var color = \"bg-oc-blue\";\n\n    // useEffect(() => {\n    //     console.log(myRef.current.getBoundingClientRect());\n    // },[myRef.current.getBoundingClientRect()])\n\n    //ANSWER\n    if (props.type === \"answer\") {\n        width = \"p-2\";\n        height = \"h-12 lg:h-20\";\n        text_size = \"text-2xl sm:text-4xl lg:text-5xl\";\n    }\n\n    //WALL\n    else if (props.type === \"wall\") {\n        width = \"w-20 sm:w-24 lg:w-52 cursor-pointer\";\n        height = \"h-16 sm:h-20 lg:h-40\";\n        text_size = \"text-1xl lg:text-4xl\";\n        color = props.color;\n    }\n\n    //VOWELS\n    else if (props.type === \"vowels\") {\n        width = \"p-4\";\n        height = \"\";\n        text_size = \"text-3xl sm:text-4xl lg:text-5xl\";\n        color = \"bg-blue-800 text-white\";\n    } else {\n        width = \"w-16 sm:w-36 lg:w-80\";\n        height = \"h-12 sm:h-28 lg:h-64\";\n        text_size = \"text-2xl sm:text-6xl lg:text-8xl\";\n    }\n\n    return (\n        <div\n            ref={ref}\n            onClick={!props.matched && handleClick}\n            className={`${width} ${height} ${color} shadow-2xl rounded-md`}\n        >\n            <h1\n                className={`${text_size} w-full h-full flex justify-center items-center text-center`}\n            >\n                {props.children}\n            </h1>\n        </div>\n    );\n});\n\nexport default Rectangle;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/WallIcon.js",[],"/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/Game.js",["60","61"],"import React, { useState } from \"react\";\nimport PSWall from \"./PSWall\";\nimport WordWall from \"./WordWall\";\nimport PSRow from \"./PSRow\";\nimport MissingVowels from \"./MissingVowels\";\n\nfunction Game({ ...props }) {\n    const [gameState, setGameState] = useState({\n        round: 0,\n        wallIndex: 0,\n        scores: 0,\n        clickedRow: false,\n    });\n\n    const connectionWall = [\n        [\"A\", \"B\", \"C\", \"D\", \"Letter\"],\n        [\"E\", \"F\", \"G\", \"H\", \"Letter\"],\n        [\"I\", \"J\", \"K\", \"L\", \"Letter\"],\n        [\"M\", \"N\", \"O\", \"P\", \"Letter\"],\n    ];\n\n    const incrementRound = () => {\n        setGameState({ ...gameState, round: gameState.round + 1 });\n        console.log(gameState.round);\n    };\n\n    const psWallHandle = () => {\n        setGameState({ ...gameState, clickedRow: true });\n    };\n\n    const psRowExit = () => {\n        setGameState({ ...gameState, wallIndex: gameState.wallIndex + 1, clickedRow: false });\n    };\n\n    var div = null;\n\n    if (gameState.round < 2) {\n        return (\n            <div>\n                {gameState.clickedRow === false ? (\n                    <PSWall onClick={psWallHandle}></PSWall>\n                ) : (\n                    <PSRow exitClick={psRowExit} row={connectionWall[gameState.wallIndex]}></PSRow>\n                )}\n            </div>\n        );\n    }\n    return <WordWall />;\n}\nexport default Game;\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/utilities/helpersWordWall.js",["62","63","64"],"export function randomize(arr) {\n    let random = [];\n    let val = 0;\n    while (arr.length) {\n        let index = Math.floor(Math.random() * arr.length);\n        val = arr.splice(index, 1);\n        random.push(...val);\n    }\n    return random;\n}\n\nexport function animate(arr, eltBoundsBefore, color) {\n    const eltBoundsAfter = arr.map((el) => {\n        return el.current.getBoundingClientRect();\n    });\n\n    arr.forEach((item, index) => {\n        const deltaX = eltBoundsBefore[index].left - eltBoundsAfter[index].left;\n        const deltaY = eltBoundsBefore[index].top - eltBoundsAfter[index].top;\n        const deltaW = eltBoundsBefore[index].width / eltBoundsAfter[index].width;\n        const deltaH = eltBoundsBefore[index].height / eltBoundsAfter[index].height;\n\n        item.current.animate(\n            [\n                {\n                    transformOrigin: \"top left\",\n                    transform: `\n                  translate(${deltaX}px, ${deltaY}px)\n                  scale(${deltaW}, ${deltaH})\n                `,\n                },\n                {\n                    transformOrigin: \"top left\",\n                    transform: `\n                translate(${0}px, ${0}px)\n                scale(${deltaW}, ${deltaH})\n              `,\n                },\n            ],\n            {\n                duration: 1000,\n                easing: \"ease-in-out\",\n                fill: \"both\",\n            },\n        );\n    });\n}\n\nexport function checkForMatch(clickedList) {\n    return (\n        clickedList[0].group == clickedList[1].group &&\n        clickedList[0].group == clickedList[2].group &&\n        clickedList[0].group == clickedList[3].group\n    );\n}\n\nexport function clearClickedList(clickedList, solvedList, idToIndex) {\n    for (let block of clickedList) {\n        let foundIndex = idToIndex.get(block.id);\n        solvedList[foundIndex].clicked = false;\n        solvedList[foundIndex].color = \" bg-oc-blue\";\n    }\n}\n","/Users/alexkats/Documents/Only_Connect/only_connect/src/Components/PSRow.js",["65","66","67"],"import React, { useState, useEffect } from \"react\";\n//import socketIOClient from \"socket.io-client\";\nimport Rectangle from './Rectangle'\n\nfunction PSRow(props)\n{\n    const [count, setCount] = useState(0);\n    const hidden_dictionary = {};\n\n    const handleClick = () =>\n    {\n        setCount(count + 1);\n        if(count == final_number + 1)\n        {\n            props.exitClick();\n        }\n    }\n\n    var final_number = 0;\n    if(props.type === \"sequence\")\n    {\n        final_number = 2;\n    }\n    else\n    {\n        final_number = 3;\n    }\n\n    return (\n        <div className=\"grid grid-cols-4 justify-items-center items-center py-14 lg:py-40 gap-y-10 lg:gap-y-20\">\n                <Rectangle type=\"rectangle\">A</Rectangle>\n                <Rectangle type=\"rectangle\" hidden={count >= 1 ? \"\" : \"hidden\"}>B</Rectangle>\n                <Rectangle type=\"rectangle\" hidden={count >= 2 ? \"\" : \"hidden\"}>C</Rectangle>\n                <Rectangle type=\"rectangle\" hidden={count >= final_number ? \"\" : \"hidden\"}>{props.type === \"sequence\" ? \"?\" : \"D\"}</Rectangle>\n            <div className=\"col-span-full w-full justify-items-center px-4 lg:px-20\">\n                <Rectangle type=\"answer\" hidden={count >= (final_number + 1) ? \"\" : \"hidden\"}>Hello</Rectangle>\n            </div>\n            <div className=\"col-span-4 justify-items-center px-4 lg:px-20 cursor-pointer\">\n                <Rectangle clickBlock={handleClick} type=\"answer\">Next</Rectangle>\n            </div>\n        </div>\n    )\n}\n\nexport default PSRow",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":71,"column":13,"nodeType":"74","messageId":"75","endLine":71,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":91,"column":23,"nodeType":"78","messageId":"79","endLine":91,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":130,"column":71,"nodeType":"78","messageId":"79","endLine":130,"endColumn":73},{"ruleId":"72","severity":1,"message":"80","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":28},{"ruleId":"72","severity":1,"message":"81","line":1,"column":30,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"82","line":1,"column":38,"nodeType":"74","messageId":"75","endLine":1,"endColumn":47},{"ruleId":"72","severity":1,"message":"83","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":21},{"ruleId":"72","severity":1,"message":"84","line":22,"column":11,"nodeType":"74","messageId":"75","endLine":22,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":51,"column":30,"nodeType":"78","messageId":"79","endLine":51,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":52,"column":30,"nodeType":"78","messageId":"79","endLine":52,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":53,"column":30,"nodeType":"78","messageId":"79","endLine":53,"endColumn":32},{"ruleId":"72","severity":1,"message":"82","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"85","line":8,"column":11,"nodeType":"74","messageId":"75","endLine":8,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":13,"column":18,"nodeType":"78","messageId":"79","endLine":13,"endColumn":20},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'delay' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useCallback' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'MissingVowels' is defined but never used.","'incrementRound' is assigned a value but never used.","'hidden_dictionary' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]